Servlet은 표준이 나오기 전에 만들어진 표준으로 자바에서 웹 어플리케이션을 개발할 수 있도록 하기 위해 만들어 졌으며 자바 클래스를 웹에서 실행 할 수 있도록 한 웹 프로그램
javax.sevlethttp.HttpServlet 클래스로부터 상속받아서 작성
서블릿 요청 처리
  - 요청 방식에 따라 doGet이나 doPost 메서드를 재정의 하여 처리
  - service 메서드를 재정의 하여 사용할 수 있는데 이 메서드는 get방식이나 post방식 상관없이 호출되며 이 메서드가 호출되면 doGet이나 doPost 메서드는 호출되지 않는다.
서블릿에서 요청을 처리하기 위해 오버라이딩 한 메서드는 request 객체를 이용해서 웹 브라우저 요청 정보를 읽어 오던가 아니면 response를 이용해서 응답을 전송할수 있다
응답을 전송하고자 하는 경우는 response 객체의 setContentType()메서드를 이용해서 타입과 인코딩 방식을 지정해 주어야 한글이 깨지지않는다.
웹 브라우저에 데이터를 전송하려면 getWriter()를 호출해서 문자열 데이터를 출력할 수 있는 printWriter를 가져오고 print()나 println()을 이용해서 전송한다
Get방식 
  - url값으로 정보가 전송되어 보안에 약함. 주소와 매개변수를 붙여서 주소 표시줄에 입력하는 방법(?로 구분). form태그에서 명시적으로 Get방식으로 요청하는 경우 (method="get") .매개변수의 데이터는 255자 이내이면 보안성이 없다
Post방식
  - header를 이용해 정보가 전송되어 보안에 강함. form태그에서 명시적으로 Post 방식으로 요청 (method="post"). 데이터의 크기에 제한이 없으며 URL에 표시되지 않으므로 보안성에 우수. 
	한글 파라미터 전달시 requst.setCharacterEnccoding("UTF-8")추가
컨텍스트 패스 (Context paht) : WAS(Web Application Server)에서 웹어플리케이션을 구분하기 위한 path. 해당 웹 어플리케이션 이름. 이클립스에서 프로젝트를 생성하면, 자동으로 server.xml에 추가된다
			그러므로 프로젝트를 삭제하고 다시 같은 이름의 프로젝트를 생성할 수 없다.
Servlet 작동순서 : 클라이언트에서 servlet요청이 들어 오면 서버에서는 servlet컨테이너를 만들고, 요청이 있을 때 마다 스레드가 생긴다
 		웹 브라우저 > 웹서버 > 웹어플리케이션 > Servlet 컨테이너 Servlet객체생성
Servlet 라이프사이클(생명주기) : 언어를 할 때 라이프사이클은 호출할 시점의 정확한 시점을 알 필요가 있다.
1. Servlet의 사용도가 높은 이유는 빠른 응답 속도 때문. Servlet은 최초 요청 시 객체가 만들어져 메모리에 로딩되고 이후 요청 시에는 기존의 객체를 재활용 하게 된다. 따라서 동작 속도가 빠르다.
2. Servlet의 라이프사이클 : 
	- 실행 시기 : Servlet 객체 생성 (최초 한번) - 최초요청, 컨테이너 시작 : init() 호출(최초 한번)
	- 모든 요청과 응답 : Service(), doGet(), doPost() 호출 (요청시 service가 있으면 doGet이나 doPost 실행하지 않고 servise가 실행 통상적으론 servise를 사용하지않고 doGet이나 doPost 사용 ) 
<<<<<<< HEAD
	- 컨테이너 종료/어플리케이션종료 : destroy() 호출 (마지막한번 자원헤제 : Servlet수정, 서버재가동 등)
=======
	- 컨테이너 종료/어플리케이션종료 : destroy() 호출 (마지막한번 자원헤제 : Servlet수정, 서버재가동 등)
				
>>>>>>> 8cb20b216a796eca8c2d01141127b81eb72695f0
