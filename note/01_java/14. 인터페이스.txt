<<<<<<< HEAD
인터페이스란
① 작업명세서(작업지시서) - "앞으로 이렇게 만들어요"라고 표현해 놓은 것
   - 실제 구현된 것이 전혀 없는 기본 설계도.
   - 객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다
   - 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다
   - 추상메서드와 상수 만을 멤버로 가질 수 있다.
② 객체의 다형성 구현
③ 사용법은 어렵지 않지만, 실제 개발에 적용시키기는 쉽지 않다.
인터페이스의 장점
① 개발시간을 단축시킬 수 있다.
인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 
메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다. 
그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
② 표준화가 가능하다
프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다
③ 독립적인 프로그래밍이 가능하다
인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.
인터페이스와 추상클래스 (공통점)
① 추상메소드를 가지고 있습니다 - 추상메소드를 가지고 있어 하위 클래스에서 구현해야 합니다.
② 변수 타입이 목적 입니다 - 객체생성이 목적이 아닌 변수 타입을 정의하는 것이 목적입니다.
③ 객체 생성이 불가합니다. anonymose(익명클래스)는 이용할 수 있다..

=======
<<<<<<< HEAD
인터페이스란? 
작업명세서(작업지시서) - 객체의 다형성 구현 
인터페이스는 클래스가 구현해야 할 메서드의 목록을 정의하는 일종의 작업지시서이다. 
인터페이스 자체는 구현을 포함하지 않으며, 오직 메서드 선언만 가진다.
interface 키워드: 
인터페이스를 정의할 때 interface 키워드를 사용한다.
추상 메서드: 
인터페이스의 모든 메서드는 암묵적으로 추상적이며, 자식 클래스(구현 클래스)에서 구현해야 한다. 
다중 구현 가능: 
자바 클래스는 다중 상속을 지원하지 않지만, 여러 인터페이스를 구현할 수 있다. 즉, 하나의 클래스가 여러 인터페이스를 구현함으로써 다양한 기능을 제공할 수 있다.
implements 키워드: 
클래스가 인터페이스를 구현할 때 implements 키워드를 사용하며, 인터페이스에 정의된 모든 추상 메서드를 구현해야 한다.
변수 선언: 
인터페이스에서 선언된 변수는 public, static, final이며, 상수로 간주된다.
상속과 차이점: 
클래스 상속은 구현 상속이라면, 인터페이스는 구현의 약속을 강제하는 구조다. 클래스는 단일 상속만 가능하지만, 인터페이스는 다중 구현이 가능하다.
사용 목적: 
인터페이스는 다양한 클래스들이 공통된 동작을 갖도록 하고, 서로 다른 클래스들이 동일한 방식으로 상호작용하도록 설계할 때 사용된다.
유지보수의 유연성: 
인터페이스는 코드의 결합도를 낮추고, 다양한 클래스들이 동일한 방식으로 행동하도록 강제하여 유지보수성과 확장성을 높인다.
>>>>>>> 8f4478f802d5bfd6a9aa4f2ddb8668403598980e
>>>>>>> a7d949f937dff785531ef074e6ca2ffc06f8fd17
