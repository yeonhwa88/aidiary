① 작업명세서(작업지시서) - "앞으로 이렇게 만들어요"라고 표현해 놓은 것
   - 실제 구현된 것이 전혀 없는 기본 설계도.
   - 객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다
   - 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다
   - 추상메서드와 상수 만을 멤버로 가질 수 있다.
② 객체의 다형성 구현
③ 사용법은 어렵지 않지만, 실제 개발에 적용시키기는 쉽지 않다.
인터페이스의 장점
① 개발시간을 단축시킬 수 있다.
인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 
메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다. 
그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
② 표준화가 가능하다
프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다
③ 독립적인 프로그래밍이 가능하다
인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.
인터페이스와 추상클래스 (공통점)
① 추상메소드를 가지고 있습니다 - 추상메소드를 가지고 있어 하위 클래스에서 구현해야 합니다.
② 변수 타입이 목적 입니다 - 객체생성이 목적이 아닌 변수 타입을 정의하는 것이 목적입니다.
<<<<<<< HEAD:note/01_java/13_인터페이스.txt
③ 객체 생성이 불가합니다. anonymose(익명클래스)는 이용할 수 있다.
=======
③ 객체 생성이 불가합니다. anonymose(익명클래스)는 이용할 수 있다.
>>>>>>> 8cb20b216a796eca8c2d01141127b81eb72695f0:note/01_java/13. 인터페이스.txt
