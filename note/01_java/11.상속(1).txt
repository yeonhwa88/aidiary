상속(Inheritance) : 상속이란 
부모클래스가 가지고 있는 속성과 메서드를 활용할 수 있는 개념 
1. 일상에서 알고 있는 상속과 비슷한 개념
※ 객체지향의 핵심적인 요소는 상속과 추상화.
프로그래밍에서도 어떤 클래스가 다른 클래스로부터 데이터(속성)와 메소드(기능)를 상속받을 수 있다. 
이럴 경우 상속받은 객체는 상속해 준 객체의 데이터 및 메소드를 이용할 수 있고 또는 변경할 수도 있다.
2. 상속 문법의 이해
⑴ 상속이란 기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것
⑵ 두 클래스를 부모와 자식(조상과 자손)으로 관계를 맺어줄 수 있다.
⑶ 자손은 조상의 멤버를 상속받으나, private멤버는 직접 제어할 없다.
   자손의 멤버 개수는 조상보다 작을 수 없다(같거나 많다)
⑷ 자바에서는 다중 상속이 지원되지 않는다.
3. 상속이 필요한 이유
상속이 필요한 이유는 크게 두 가지 이유가 있다.
⑴ 모든 개발을 처음부터 하얀 도화지에 할 필요는 없습니다. 
이미 훌륭한 선배님들께서 만들어 놓은 프로그램이 있다면 상속을 통해서 훌륭한 결과물을 빠른 시간 내에 만들 수 있다.
또한 기존의 훌륭한 프로그램은 대부분 검증이 잘 되어 있어 버그도 거의 없을 수 있다.
⑵ 다양한 객체(타입)를 상속을 통해서 하나의 객체(타입)으로 묶을 수 있다.
이것은 추상화 개념의 이해가 있어야 하는데요, 아직은 추상화에 대해서 살펴보지 않았으므로 우선은 다양한 객체를 하나로 통일시킬 수 있다고만 알고 있으면 될 거 같습니다.
3. 생성자와 관련된 상속 예제
⑴ 생성자함수 실행 순서도 위의 예제에서 추가하여 확인하자
⑵ 상속 관계에서의 생성자 문제와 해결책 
- 디폴트 생성자는 JVM이 제공해주지만, 클래스 내의 매 개변수가 있는 생성자가 하나라도 존재하게 되면 JVM 은 더 이상 디폴트 생성자를 제공해 주지 않게 된다. 
- 만일 수퍼 클래스에 매개 변수가 있는 생성자를 정의하면서 매개 변수 없는 디폴트 생성자를 정의하지 않으면 수퍼 클래스에는 매개 변수 없는 생성자가 존재하지 않게 된다. 
- 이러한 상태에서 서브 클래스의 생성자는 수퍼 클래스 의 매개 변수 없는 디폴트 생성자를 여전히 호출하고 있 기에 존재하지 않는 생성자를 호출하는 셈이 되어 문제 가 발생하게 된다. 
