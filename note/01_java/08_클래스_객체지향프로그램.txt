객체지향 프로그래밍(OOP) : 데이터를 객체로 표현하고, 이 객체들이 상호작용하는 방식으로 프로그래밍하는 방법.
클래스 : 객체를 생성하는 틀로, 속성(필드)과 동작(메소드)을 정의한다.
객체 : 클래스의 인스턴스이며, 실제로 메모리상에 존재하는 데이터.
상속 : 기존 클래스를 확장해 새로운 클래스를 만드는 개념으로, 코드 재사용성을 높인다.
다형성 : 같은 메소드 이름이 다른 클래스에서 다양하게 동작할 수 있게 하는 원리.
추상화 : 불필요한 세부 사항을 숨기고 중요한 개념만 드러내어 복잡성을 줄인다.
인터페이스 : 클래스가 구현해야 할 메소드들의 집합으로, 다중 상속과 유사한 역할을 한다.
OOP 장점 : 코드의 재사용성, 유지보수성, 확장성을 높이고, 복잡한 시스템을 쉽게 관리할 수 있게 해준다.