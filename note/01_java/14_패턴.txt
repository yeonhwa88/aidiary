디자인 패턴은 자주 발생하는 소프트웨어 설계 문제를 해결하기 위한 재사용 가능한 솔루션이다.
목적 : 코드의 재사용성, 유지보수성, 확장성을 높이고, 문제 해결에 있어 일관된 접근 방식을 제공한다.
Singleton 패턴 : 싱글톤 패턴(Singleton pattern)이란 어떤 클래스의 객체는 오직 하나인 유일한 객체를 만들어 여러가지 상황에서 동일한 객체에 접근하기 위해 만들어진 패턴이다.
Strategy 패턴 : 기능 하나를 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다. 스트래티지를 활용하면 기능(알고리즘)을 사용하는 클라이언트와는 독립적으로 기능(알고리즘)을 변경할 수 있다.
유연한 설계: 디자인 패턴을 사용하면 코드가 더 유연하고, 유지보수 및 확장에 용이한 소프트웨어를 개발할 수 있다.