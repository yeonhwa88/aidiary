SQLite : 
- 데이터 베이스는 별도의 DBMS없이 SQL을 이용하여 DB 엑세스 할 수 있도록 만든 간단한 디스크 기반의 DB 제공
- c 라이브러리
- 프로토타입을 만들 때 사용
- DB연결시 , DB파일이 있으면 연결, 없으면 빈 파일 생성
conn = sqlite3.connect('폴더/파일명.db') : DB연결 
cursor = conn.cursor() : SQL문을 실행시키고 결과를 조회 사용하는 객체
cursor.execute('실행할 SQL문')
cursor.rowcount  : insert, update, delete문 실행결과 (정수로 반환)
select문 실행 결과를 받는 함수
- fetchone() : 결과를 한행씩 받을 때 (튜플)
- fetchall() : 결과를 모두 받을때 (튜플 list)
- fetchmany(n) : 결과를 n행 받을 때 (튜플 list) DB에 있는 행보다 많은 행의 수를 적어도 에러 나지않고 있는 행만 출력
SQL구문에 파라미터 사용 (qmark, named)
qmark : cursor.execute('SELECT * FROM MEMBER WHERE NAME IN (?,?)',(name1, name2))
named : cursor.execute('SELECT * FROM MEMBER WHERE NAME IN (:name1, name2)',{"name1":name1, "name2":name2})
cursor.close() : 생략가능
conn.close() : 꼭 close() conn 객체 close시 cursor는 자동으로 닫힘
Oracle 데이터 베이스 연동 : import ex_Oracle
- conn 받아오는 방법 1
    oracle_dsn = cx_Oracle.makedsn(host='localhost', port=1521, sid='xe')
    conn = cx_Oracle.connect("scott", "tiger", dsn=oracle_dsn) 
- conn 받아오는 방법 2
    conn = cx_Oracle.connect('scott','tiger','localhost:1521/xe')
- cursor 객체 생성 
    cursor = conn.cursor()
    sql = "SELECT * FROM EMP"
    cursor.execute(sql)
    emp = cursor.fetchall()